branches:
  only:
  - master
clone_folder: C:\sbcl\
environment:
  GITHUB_AUTH_TOKEN:
    secure: ULPZKC7s5emtsxW6EDLicUZKhL5iAaFTV5tDCN3shwRCWCQhXUtbb6PKou8JxfJd
  MSYS2_DIR: C:\msys64\
  SBCL_COMMAND: sbcl --noinform --end-runtime-options --no-sysinit --no-userinit --noprint --disable-debugger --end-toplevel-options
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  SBCL_HOST_DIR_x86: C:\sbcl-x86\
  SBCL_HOST_DIR_x86-64: C:\sbcl_x86-64\
  SBCL_HOST_INSTALLER_URL: https://sourceforge.net/projects/sbcl/files/sbcl/1.3.18/sbcl-1.3.18-x86-64-windows-binary.msi/download
  matrix:
    - MSYSTEM: MINGW32
      ARCH: x86
      SBCL_HOME: C:\sbcl-x86\
    - MSYSTEM: MINGW64
      ARCH: x86-64
      SBCL_HOME: C:\sbcl_x86-64\
install:
  - ps: |-
      $PathAdditions = @(
        $([IO.Path]::Combine($env:MSYS2_DIR, $env:MSYSTEM, "bin\"))
        $([IO.Path]::Combine($env:MSYS2_DIR, "usr\bin\"))
        $env:SBCL_HOME
      )
      
      $env:PATH = $($PathAdditions -Join ";") + ";$env:PATH"
      
      pacman -S --needed --noconfirm pacman-mirrors
      pacman -Syu --noconfirm
      pacman -S --needed --noconfirm coreutils make git
      
      if (!(Test-Path $env:SBCL_HOME)) {
        Add-AppveyorMessage "SBCL_HOME($env:SBCL_HOME) not present"
        Add-AppVeyorMessage "Downloading and installing $env:SBCL_HOST_INSTALLER_URL"
        
        # Download SBCL Installer
        Start-FileDownload $env:SBCL_HOST_INSTALLER_URL sbcl-installer.msi -ErrorAction Stop
        
        # Make sure the installer's actually where we expect it to be
        if(!(Test-Path sbcl-installer.msi)) {
          Add-AppveyorMessage "Installer missing" -Category Error
          exit $LastExitCode
        }
        
        Add-AppveyorMessage "Installing"
        cmd /c start /wait msiexec.exe /i sbcl-installer.msi /quiet /qn /norestart INSTALLDIR=$env:SBCL_HOME
        
        if ($LastExitCode -ne 0) {
          Add-AppveyorMessage "Error installing: $LastExitCode" -Category Error
          exit $LastExitCode
        }
      }
      else {
        Add-AppveyorMessage "SBCL_HOME exists"
      }
cache:
  - $(SBCL_HOME)
build_script:
  - ps: |-
      # Run the build
      timeout 10m ./make.sh --xc-host=$env:SBCL_COMMAND --arch=$env:ARCH
      if ($LastExitCode -ne 0) {
        Add-AppveyorMessage "Error building SBCL: $LastExitCode" -Category Error
        exit $LastExitCode
      }
      
      Add-AppveyorMessage "Building SBCL"
      
      # Build the installer
      bash make-windows-installer.sh
      
      if ($LastExitCode -ne 0) {
        Add-AppveyorMessage "Error building installer: $LastExitCode" -Category Error
        exit $LastExitCode
      }
      
      # Get the version
      Set-AppveyorBuildVariable -Name SBCL_VERSION -Value $(Invoke-Expression "'(princ (with-open-file (f ""version.lisp-expr"") (read f)))' | $env:SBCL_COMMAND")
      
      # Get the version plus arch
      Set-AppveyorBuildVariable -Name SBCL_VERSION_PLUS_ARCH -Value $(cat output/version.txt)
      
      $ZIPDIR = Join-Path $(Resolve-Path ".\") "output\zip\"
      mkdir $ZIPDIR
      
      # Prepare the directory to zip for the binary package (non-installer)
      copy-item "src\runtime\sbcl.exe" $ZIPDIR
      copy-item "output\sbcl.core" $ZIPDIR
      copy-item "obj\sbcl-home\contrib" $ZIPDIR -recurse -force
      
      # Package the relevant files into a zip for deployment
      # Switch into zip directory before calling 7z so it preserves hierarchy
      pushd $ZIPDIR
      
      7z a "..\sbcl-$env:SBCL_VERSION_PLUS_ARCH.zip" *
      
      popd
      if ($LastExitCode -ne 0) {
        Add-AppveyorMessage "Error zipping binaries: $LastExitCode" -Category Error
        exit $LastExitCode
      }
test: off
artifacts:
  - path: output\sbcl-$(SBCL_VERSION_PLUS_ARCH).msi
    name: installer
  - path: output\sbcl-$(SBCL_VERSION_PLUS_ARCH).zip
    name: zip
deploy:
  - provider: GitHub
    tag: $(APPVEYOR_REPO_TAG_NAME)
    auth_token: $(GITHUB_AUTH_TOKEN)
    artifact: installer, zip
    draft: true
    force_update: false